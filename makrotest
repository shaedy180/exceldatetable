Option Explicit

' === KONFIG ===
Private Const PIVOT_NAME As String = "ELV Erlöse"

' === HILFE: Pivot holen ===
Private Function GetPivot() As PivotTable
    Set GetPivot = ActiveSheet.PivotTables(PIVOT_NAME)
End Function

' === HILFE: Prüfen, ob ein Datenfeld (Measure) schon in WERTE ist ===
Private Function HasDataField(pt As PivotTable, caption As String) As Boolean
    Dim df As PivotField
    On Error Resume Next
    Set df = pt.DataFields(caption)
    HasDataField = Not df Is Nothing
    On Error GoTo 0
End Function

' === HILFE: Zahlenformat passend setzen ===
Private Sub ApplyNumberFormat(pt As PivotTable, caption As String)
    Dim df As PivotField
    On Error Resume Next
    Set df = pt.DataFields(caption)
    On Error GoTo 0
    If df Is Nothing Then Exit Sub

    Select Case LCase$(caption)
        Case LCase$("Umsatz")
            df.NumberFormat = "#.##0"                 ' wenn Anzeige-T€ gewünscht: df.NumberFormat = "#.##0"" T€"""
        Case LCase$("Δ €")
            df.NumberFormat = "+#.##0;-#.##0;"        ' Null unsichtbar
        Case LCase$("Δ %")
            df.NumberFormat = "0,00%"
        Case LCase$("Menge"), LCase$("ΔMenge")
            df.NumberFormat = "#.##0"
        Case Else
            df.NumberFormat = "General"
    End Select
End Sub

' === KERNE: Measure in WERTE hinzufügen / entfernen ===
Private Sub AddMeasure(ByVal caption As String)
    Dim pt As PivotTable: Set pt = GetPivot()
    pt.ManualUpdate = True

    If pt.OLAP Then
        ' OLAP/Data-Model: erst direkter Versuch über UniqueName [Measures].[Caption],
        ' fällt zurück auf Suche per Caption
        Dim pf As PivotField
        On Error Resume Next
        Set pf = pt.CubeFields("[Measures].[" & caption & "]").AddToDataField
        On Error GoTo 0
        If pf Is Nothing Then
            Dim cf As Object
            For Each cf In pt.CubeFields
                On Error Resume Next
                If cf.CubeFieldType = 2 Then ' 2 = xlMeasure
                    If StrComp(cf.Caption, caption, vbTextCompare) = 0 Then
                        Set pf = cf.AddToDataField
                        Exit For
                    End If
                End If
                On Error GoTo 0
            Next cf
        End If
    Else
        ' klassische Pivot
        Dim src As PivotField
        On Error Resume Next
        Set src = pt.PivotFields(caption)
        If Not src Is Nothing Then src.Orientation = xlDataField
        On Error GoTo 0
    End If

    ApplyNumberFormat pt, caption
    pt.ManualUpdate = False
    On Error Resume Next
    pt.TableRange1.Columns.AutoFit
    On Error GoTo 0
End Sub

Private Sub RemoveMeasure(ByVal caption As String)
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim df As PivotField
    pt.ManualUpdate = True
    On Error Resume Next
    Set df = pt.DataFields(caption)
    If Not df Is Nothing Then df.Orientation = xlHidden
    On Error GoTo 0
    pt.ManualUpdate = False
End Sub

Private Sub Reorder(ByVal orderArr As Variant)
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim i As Long, df As PivotField
    For i = LBound(orderArr) To UBound(orderArr)
        On Error Resume Next
        Set df = pt.DataFields(CStr(orderArr(i)))
        If Not df Is Nothing Then df.Position = i + 1
        On Error GoTo 0
    Next i
End Sub

' === TOGGLES ===
Public Sub Toggle_Umsatz()
    Dim pt As PivotTable: Set pt = GetPivot()
    If HasDataField(pt, "Umsatz") Then
        RemoveMeasure "Umsatz"
    Else
        AddMeasure "Umsatz"
    End If
End Sub

Public Sub Toggle_Menge()
    Dim pt As PivotTable: Set pt = GetPivot()
    If HasDataField(pt, "Menge") Then
        RemoveMeasure "Menge"
    Else
        AddMeasure "Menge"
    End If
End Sub

Public Sub Toggle_DeltaEuro()
    Dim pt As PivotTable: Set pt = GetPivot()
    If HasDataField(pt, "Δ €") Then
        RemoveMeasure "Δ €"
    Else
        AddMeasure "Δ €"
    End If
End Sub

Public Sub Toggle_DeltaPct()
    Dim pt As PivotTable: Set pt = GetPivot()
    If HasDataField(pt, "Δ %") Then
        RemoveMeasure "Δ %"
    Else
        AddMeasure "Δ %"
    End If
End Sub

Public Sub Toggle_DeltaMenge()
    Dim pt As PivotTable: Set pt = GetPivot()
    If HasDataField(pt, "ΔMenge") Then
        RemoveMeasure "ΔMenge"
    Else
        AddMeasure "ΔMenge"
    End If
End Sub

' === PRESETS ===
Public Sub Show_Only_Umsatz()
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim df As PivotField
    pt.ManualUpdate = True
    For Each df In pt.DataFields
        df.Orientation = xlHidden
    Next df
    pt.ManualUpdate = False
    AddMeasure "Umsatz"
    Reorder Array("Umsatz")
End Sub

Public Sub Show_Umsatz_und_DeltaEuro()
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim df As PivotField
    pt.ManualUpdate = True
    For Each df In pt.DataFields
        df.Orientation = xlHidden
    Next df
    pt.ManualUpdate = False
    AddMeasure "Umsatz"
    AddMeasure "Δ €"
    Reorder Array("Umsatz", "Δ €")
End Sub

Public Sub Show_All()
    Dim arr
    arr = Array("Umsatz", "Δ €", "Δ %", "Menge", "ΔMenge")
    Dim i As Long
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim df As PivotField
    pt.ManualUpdate = True
    For Each df In pt.DataFields
        df.Orientation = xlHidden
    Next df
    pt.ManualUpdate = False
    For i = LBound(arr) To UBound(arr)
        AddMeasure CStr(arr(i))
    Next i
    Reorder arr
End Sub

Public Sub Hide_All()
    Dim pt As PivotTable: Set pt = GetPivot()
    Dim df As PivotField
    pt.ManualUpdate = True
    For Each df In pt.DataFields
        df.Orientation = xlHidden
    Next df
    pt.ManualUpdate = False
End Sub
